From 24cc1f951527cc37ff33664cc97a22c25377e84f Mon Sep 17 00:00:00 2001
From: highpreef <david.jorge@gmail.com>
Date: Tue, 31 Mar 2020 18:37:16 +0100
Subject: [PATCH] task3_1

---
 src/st1920/automaton/REGEXWrapper.java |  9 +++
 src/st1920/automaton/REString.java     | 78 ++++++++++++++++++++++++++
 2 files changed, 87 insertions(+)
 create mode 100644 src/st1920/automaton/REGEXWrapper.java
 create mode 100644 src/st1920/automaton/REString.java

diff --git a/src/st1920/automaton/REGEXWrapper.java b/src/st1920/automaton/REGEXWrapper.java
new file mode 100644
index 0000000..6550c24
--- /dev/null
+++ b/src/st1920/automaton/REGEXWrapper.java
@@ -0,0 +1,9 @@
+package st1920.automaton;
+
+public class REGEXWrapper {
+	
+	public static boolean matches(String s, REString re) {
+		return RegExpMatcher.matches(s, re.string);
+	}
+	
+}
\ No newline at end of file
diff --git a/src/st1920/automaton/REString.java b/src/st1920/automaton/REString.java
new file mode 100644
index 0000000..8862845
--- /dev/null
+++ b/src/st1920/automaton/REString.java
@@ -0,0 +1,78 @@
+package st1920.automaton;
+
+public class REString {
+	public String string;
+	
+	public REString(String p) {
+		string = p;
+	}
+	
+	public REString makeAlpha(REString p) {
+		return new REString(p.string + "a");
+	}
+
+	public REString makeAnd(REString p, REString q) {
+		return new REString(p.string + "&" + q.string);
+	}
+	
+	public REString makeOr(REString p, REString q) {
+		return new REString(p.string + "|" + q.string);
+	}
+	
+	public REString makeNum(REString p) {
+		return new REString(p.string + "1");
+	}
+	
+	public REString makeConcatenation(REString p, REString r) {
+		return new REString(p.string + r.string);
+	}
+	
+	public REString makeZeroOrOne(REString p) {
+		return new REString(p.string + "?");
+	}
+	
+	public REString makeZeroOrMore(REString p) {
+		return new REString(p.string + "*");
+	}
+	
+	public REString makeOneOrMore(REString p) {
+		return new REString(p.string + "+");
+	}
+	
+	public REString makeRange(REString p, int a, int b) {
+		return new REString(p.string + "{" + a + "," + b + "}");
+	}
+	
+	public REString makeExclude(REString p) {
+		return new REString("~" + p.string);
+	}
+	
+	public REString makeClass(REString p) {
+		return new REString("[" + p.string + "]");
+	}
+	
+	public REString makeExcludeClass(REString p) {
+		return new REString("[^" + p.string + "]");
+	}
+	
+	public REString makeAnyChar(REString p) {
+		return new REString(p.string + ".");
+	}
+	
+	public REString makeNothing(REString p) {
+		return new REString(p.string + "#");
+	}
+	
+	public REString makeAny(REString p) {
+		return new REString(p.string + "@");
+	}
+	
+	public REString makeGroup(REString p) {
+		return new REString("(" + p.string + ")");
+	}
+	
+	public REString makeRep(REString p, int a, int b) {
+		return new REString(p.string + "<" + a + "-" + b + ">");
+	}
+
+}
\ No newline at end of file
-- 
2.26.0.windows.1

